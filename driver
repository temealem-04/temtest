import json
import logging
import os
import pytest

from selenium import webdriver
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

from tests import config
from utilities.user import load_user_credentials_from_environment_variables


ACCEPTED_BROWSERS = {
    "chrome": {
        "command_executor": LOCALHOST_URL,
        "desired_capabilities": DesiredCapabilities.CHROME
    },
    "IE": {
        "command_executor": LOCALHOST_URL,
        "desired_capabilities": DesiredCapabilities.INTERNETEXPLORER
    }
}
                        
def get_driver(desired_browser):
    browser = ACCEPTED_BROWSERS.get(desired_browser)

    if not browser:
        accepted_browsers_string = ', '.join(ACCEPTED_BROWSERS.keys())
        raise Exception(f"Unrecognized browser: '{desired_browser}'; accepted options: {accepted_browsers_string}")

    return webdriver.Remote(
        command_executor=browser["command_executor"],
        desired_capabilities=browser["desired_capabilities"]
    )


@pytest.fixture()
def driver(request):
    _driver = get_driver(config.browser)
    _driver.set_window_size(1440, 1000)
    _driver.set_script_timeout(1000)
    _driver.set_page_load_timeout(1000)

    config.driver = _driver

    def quit():
        _driver.quit()

    request.addfinalizer(quit)

    return _driver


@pytest.fixture(scope='session')
def session_driver(request):
    _driver = get_driver(config.browser)
    _driver.maximize_window()

    logging.info(_driver.session_id)

    config.driver = _driver

    def quit():
        _driver.quit()

    request.addfinalizer(quit)

    return _driver

@pytest.fixture(scope='session')
def authenticated_driver(home_page, login_landing_page, login_page, session_driver):
    user_credentials = load_user_credentials_from_environment_variables()

    login_landing_page.navigate()
    login_landing_page.click_log_in_button()
    login_page.log_in(user_credentials["username"], user_credentials["password"])

    logging.info('Verify that the Home Page is displayed.')
    assert home_page.is_displayed()

    yield session_driver
   def _is_displayed(self, locator, timeout=0):
        if timeout > 0:
            try:
                wait = WebDriverWait(self.driver, timeout)
                wait.until(expected_conditions.visibility_of_element_located((locator['by'], locator['value'])))
            except TimeoutException:
                return False
            return True
        else:
            try:
                return self._find(locator).is_displayed()
            except NoSuchElementException:
                return False
